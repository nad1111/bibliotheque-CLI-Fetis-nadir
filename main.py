# auteur : fetis nadir
# projet : bibliotheque CLI

import json

# Charger la biblioth√®que depuis le fichier JSON
def charger_bibliotheque():
    try:
        with open("bibliotheque.json", "r") as f:
            return json.load(f)
    except FileNotFoundError:
        return []

# Sauvegarder la biblioth√®que dans un fichier JSON
def sauvegarder_bibliotheque(bibliotheque):
    with open("bibliotheque.json", "w") as f:
        json.dump(bibliotheque, f, indent=4)

# G√©n√©rer un ID unique bas√© sur les IDs existants
def generer_id_unique(bibliotheque):
    if not bibliotheque:
        return 1
    return max(livre["ID"] for livre in bibliotheque) + 1

# Afficher tous les livres
def afficher_livres(bibliotheque):
    if not bibliotheque:
        print("üìö La biblioth√®que est vide.")
    else:
        for livre in bibliotheque:
            etat = "‚úÖ Lu" if livre["Lu"] else "‚ùå Non lu"
            note = livre["Note"] if livre["Note"] is not None else "Pas not√©"
            print(f'ID: {livre["ID"]} | {livre["Titre"]} - {livre["Auteur"]} ({livre["Ann√©e"]}) | {etat} | Note: {note}')

# Ajouter un livre
def ajouter_livre(bibliotheque):
    titre = input("Titre du livre : ").strip()
    auteur = input("Auteur : ").strip()
    try:
        annee = int(input("Ann√©e de publication : "))
    except ValueError:
        print("‚ùó Ann√©e invalide. Le livre n'a pas √©t√© ajout√©.")
        return
    nouveau = {
        "ID": generer_id_unique(bibliotheque),
        "Titre": titre,
        "Auteur": auteur,
        "Ann√©e": annee,
        "Lu": False,
        "Note": None
    }
    bibliotheque.append(nouveau)
    print("‚úÖ Livre ajout√© avec succ√®s !")

# Supprimer un livre
def supprimer_livre(bibliotheque):
    try:
        id_supp = int(input("ID du livre √† supprimer : "))
        for livre in bibliotheque:
            if livre["ID"] == id_supp:
                bibliotheque.remove(livre)
                print("üóëÔ∏è Livre supprim√©.")
                return
        print("‚ùó Livre introuvable.")
    except ValueError:
        print("‚ùó Entr√©e invalide.")

# Rechercher un livre par mot-cl√©
def rechercher_livre(bibliotheque):
    mot_cle = input("Mot-cl√© dans le titre ou l‚Äôauteur : ").lower()
    resultats = [l for l in bibliotheque if mot_cle in l["Titre"].lower() or mot_cle in l["Auteur"].lower()]
    if resultats:
        afficher_livres(resultats)
    else:
        print("üîç Aucun livre trouv√©.")

# Marquer un livre comme lu et ajouter une note
def marquer_comme_lu(bibliotheque):
    try:
        id_lu = int(input("ID du livre √† marquer comme lu : "))
        for livre in bibliotheque:
            if livre["ID"] == id_lu:
                livre["Lu"] = True
                try:
                    note = float(input("Note sur 10 : "))
                    if 0 <= note <= 10:
                        livre["Note"] = note
                    else:
                        print("‚ùó La note doit √™tre entre 0 et 10. Note non enregistr√©e.")
                        livre["Note"] = None
                except ValueError:
                    print("‚ùó Note invalide. Note non enregistr√©e.")
                    livre["Note"] = None
                print("üìò Livre marqu√© comme lu.")
                return
        print("‚ùó Livre introuvable.")
    except ValueError:
        print("‚ùó Entr√©e invalide.")

# Afficher les livres selon leur √©tat lu/non lu
def afficher_filtre(bibliotheque):
    choix = input("Voulez-vous voir les livres 'lus' ou 'non lus' ? ").lower()
    if choix == "lus":
        livres = [l for l in bibliotheque if l["Lu"]]
    elif choix == "non lus":
        livres = [l for l in bibliotheque if not l["Lu"]]
    else:
        print("‚ùó Choix invalide.")
        return
    afficher_livres(livres)

# Trier les livres selon l'ann√©e, l'auteur ou la note
def trier_livres(bibliotheque):
    print("Trier par :")
    print("1. Ann√©e")
    print("2. Auteur")
    print("3. Note")
    choix = input("Votre choix : ")
    if choix == "1":
        livres_tries = sorted(bibliotheque, key=lambda x: x["Ann√©e"])
    elif choix == "2":
        livres_tries = sorted(bibliotheque, key=lambda x: x["Auteur"].lower())
    elif choix == "3":
        livres_tries = sorted(bibliotheque, key=lambda x: (x["Note"] if x["Note"] is not None else -1), reverse=True)
    else:
        print("‚ùó Choix invalide.")
        return
    afficher_livres(livres_tries)

# Menu principal de l'application
def menu():
    print("üìñ Bienvenue dans la biblioth√®que de Nadir !")
    bibliotheque = charger_bibliotheque()
    while True:
        print("\n--- MENU ---")
        print("1. Afficher tous les livres")
        print("2. Ajouter un livre")
        print("3. Supprimer un livre")
        print("4. Rechercher un livre")
        print("5. Marquer un livre comme lu")
        print("6. Afficher les livres lus ou non lus")
        print("7. Trier les livres")
        print("8. Quitter")
        choix = input("Choisissez une option : ")

        if choix == "1":
            afficher_livres(bibliotheque)
        elif choix == "2":
            ajouter_livre(bibliotheque)
        elif choix == "3":
            supprimer_livre(bibliotheque)
        elif choix == "4":
            rechercher_livre(bibliotheque)
        elif choix == "5":
            marquer_comme_lu(bibliotheque)
        elif choix == "6":
            afficher_filtre(bibliotheque)
        elif choix == "7":
            trier_livres(bibliotheque)
        elif choix == "8":
            sauvegarder_bibliotheque(bibliotheque)
            print("üíæ Biblioth√®que sauvegard√©e. √Ä bient√¥t !")
            break
        else:
            print("‚ùó Choix invalide.")

# D√©marrer le programme
if __name__ == "__main__":
    menu()
